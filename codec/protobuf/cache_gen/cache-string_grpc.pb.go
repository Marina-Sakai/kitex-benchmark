// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: cache-string.proto

package cache_gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeCache_OperateCacheString_FullMethodName = "/RuntimeCache/OperateCacheString"
)

// RuntimeCacheClient is the client API for RuntimeCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeCacheClient interface {
	//操作单元组接口
	OperateCacheString(ctx context.Context, in *OpCacheStringRequest, opts ...grpc.CallOption) (*OpCacheResponse, error)
}

type runtimeCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeCacheClient(cc grpc.ClientConnInterface) RuntimeCacheClient {
	return &runtimeCacheClient{cc}
}

func (c *runtimeCacheClient) OperateCacheString(ctx context.Context, in *OpCacheStringRequest, opts ...grpc.CallOption) (*OpCacheResponse, error) {
	out := new(OpCacheResponse)
	err := c.cc.Invoke(ctx, RuntimeCache_OperateCacheString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeCacheServer is the server API for RuntimeCache service.
// All implementations must embed UnimplementedRuntimeCacheServer
// for forward compatibility
type RuntimeCacheServer interface {
	//操作单元组接口
	OperateCacheString(context.Context, *OpCacheStringRequest) (*OpCacheResponse, error)
	mustEmbedUnimplementedRuntimeCacheServer()
}

// UnimplementedRuntimeCacheServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeCacheServer struct {
}

func (UnimplementedRuntimeCacheServer) OperateCacheString(context.Context, *OpCacheStringRequest) (*OpCacheResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateCacheString not implemented")
}
func (UnimplementedRuntimeCacheServer) mustEmbedUnimplementedRuntimeCacheServer() {}

// UnsafeRuntimeCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeCacheServer will
// result in compilation errors.
type UnsafeRuntimeCacheServer interface {
	mustEmbedUnimplementedRuntimeCacheServer()
}

func RegisterRuntimeCacheServer(s grpc.ServiceRegistrar, srv RuntimeCacheServer) {
	s.RegisterService(&RuntimeCache_ServiceDesc, srv)
}

func _RuntimeCache_OperateCacheString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpCacheStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeCacheServer).OperateCacheString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeCache_OperateCacheString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeCacheServer).OperateCacheString(ctx, req.(*OpCacheStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeCache_ServiceDesc is the grpc.ServiceDesc for RuntimeCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RuntimeCache",
	HandlerType: (*RuntimeCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OperateCacheString",
			Handler:    _RuntimeCache_OperateCacheString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache-string.proto",
}
